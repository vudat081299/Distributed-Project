## Extension .yml or .yaml are the same.

## TILApp
## Docker Compose file for Vapor
##
## Install Docker on your system to run and test
## your Vapor app in a production-like environment.
##
## Note: This file is intended for testing and does not
## implement best practices for a production deployment.
##
## Learn more: https://docs.docker.com/compose/reference/
##
##   Build images: docker-compose build
##      Start app: docker-compose up app
## Start database: docker-compose up db
## Run migrations: docker-compose up migrate
##       Stop all: docker-compose down (add -v to wipe db)
##
#version: '3.7'
#
#volumes:
#  db_data:
#
#x-shared_environment: &shared_environment
#  LOG_LEVEL: ${LOG_LEVEL:-debug}
#  DATABASE_HOST: db
#  DATABASE_NAME: vapor_database
#  DATABASE_USERNAME: vapor_username
#  DATABASE_PASSWORD: vapor_password
#
#services:
#  app:
#    image: tilapp:latest
#    build:
#      context: .
#    environment:
#      <<: *shared_environment
#    depends_on:
#      - db
#    ports:
#      - '8081:8081'
##    user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
#    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8081"]
#  migrate:
#    image: tilapp:latest
#    build:
#      context: .
#    environment:
#      <<: *shared_environment
#    depends_on:
#      - db
#    command: ["migrate", "--yes"]
#    deploy:
#      replicas: 0
#  revert:
#    image: tilapp:latest
#    build:
#      context: .
#    environment:
#      <<: *shared_environment
#    depends_on:
#      - db
#    command: ["migrate", "--revert", "--yes"]
#    deploy:
#      replicas: 0
#  db:
#    image: postgres:12-alpine
#    volumes:
#      - db_data:/var/lib/postgresql/data/pgdata
#    environment:
#      PGDATA: /var/lib/postgresql/data/pgdata
#      POSTGRES_USER: vapor_username
#      POSTGRES_PASSWORD: vapor_password
#      POSTGRES_DB: vapor_database
#    ports:
#      - '5432:5432'

# MongoDB (using db)
version: "3"

services:
  mongo-1:
    image: mongo:4.2.6
    ports:
      - "27017:27017"
    container_name: mongo-1
    hostname: mongo-1
    networks:
      - mongo_cluster
    command: mongod --replSet rs0

  mongo-2:
    image: mongo:4.2.6
    ports:
      - "27018:27017"
    container_name: mongo-2
    hostname: mongo-2
    networks:
      - mongo_cluster
    command: mongod --replSet rs0
    depends_on:
      - mongo-1

  mongo-3:
    image: mongo:4.2.6
    ports:
      - "27019:27017"
    container_name: mongo-3
    hostname: mongo-3
    networks:
      - mongo_cluster
    command: mongod --replSet rs0
    depends_on:
      - mongo-2

  mongosetup:
    image: mongo:4.2.6
    networks:
    - mongo_cluster
    volumes:
    - ./scripts:/scripts
    command: bash -c "chmod +x /scripts/setup.sh && /scripts/setup.sh"

networks:
  mongo_cluster:
    driver: bridge

# Default Postgres
## Docker Compose file for Vapor
##
## Install Docker on your system to run and test
## your Vapor app in a production-like environment.
##
## Note: This file is intended for testing and does not
## implement best practices for a production deployment.
##
## Learn more: https://docs.docker.com/compose/reference/
##
##   Build images: docker-compose build
##      Start app: docker-compose up app
## Start database: docker-compose up db
## Run migrations: docker-compose run migrate
##       Stop all: docker-compose down (add -v to wipe db)
##
#version: '3.7'
#
#volumes:
#  db_data:
#
#x-shared_environment: &shared_environment
#  LOG_LEVEL: ${LOG_LEVEL:-debug}
#  DATABASE_HOST: db
#  DATABASE_NAME: vapor_database
#  DATABASE_USERNAME: vapor_username
#  DATABASE_PASSWORD: vapor_password
#
#services:
#  app:
#    image: Server:latest
#    build:
#      context: .
#    environment:
#      <<: *shared_environment
#    depends_on:
#      - db
#    ports:
#      - '8080:8080'
#    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
#    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]
#  migrate:
#    image: Server:latest
#    build:
#      context: .
#    environment:
#      <<: *shared_environment
#    depends_on:
#      - db
#    command: ["migrate", "--yes"]
#    deploy:
#      replicas: 0
#  revert:
#    image: Server:latest
#    build:
#      context: .
#    environment:
#      <<: *shared_environment
#    depends_on:
#      - db
#    command: ["migrate", "--revert", "--yes"]
#    deploy:
#      replicas: 0
#  db:
#    image: postgres:12-alpine
#    volumes:
#      - db_data:/var/lib/postgresql/data/pgdata
#    environment:
#      PGDATA: /var/lib/postgresql/data/pgdata
#      POSTGRES_USER: vapor_username
#      POSTGRES_PASSWORD: vapor_password
#      POSTGRES_DB: vapor_database
#    ports:
#      - '5432:5432'

## Default MongoDB
## Docker Compose file for Vapor
##
## Install Docker on your system to run and test
## your Vapor app in a production-like environment.
##
## Note: This file is intended for testing and does not
## implement best practices for a production deployment.
##
## Learn more: https://docs.docker.com/compose/reference/
##
##   Build images: docker-compose build
##      Start app: docker-compose up app
## Start database: docker-compose up db
## Run migrations: docker-compose run migrate
##       Stop all: docker-compose down (add -v to wipe db)
##
#version: '3.7'
#
#volumes:
#  db_data:
#
#x-shared_environment: &shared_environment
#  LOG_LEVEL: ${LOG_LEVEL:-debug}
#  DATABASE_HOST: db
#  DATABASE_NAME: vapor_database
#  DATABASE_USERNAME: vapor_username
#  DATABASE_PASSWORD: vapor_password
#
#services:
#  app:
#    image: testmongo:latest
#    build:
#      context: .
#    environment:
#      <<: *shared_environment
#    depends_on:
#      - db
#    ports:
#      - '8080:8080'
#    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
#    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]
#  migrate:
#    image: testmongo:latest
#    build:
#      context: .
#    environment:
#      <<: *shared_environment
#    depends_on:
#      - db
#    command: ["migrate", "--yes"]
#    deploy:
#      replicas: 0
#  revert:
#    image: testmongo:latest
#    build:
#      context: .
#    environment:
#      <<: *shared_environment
#    depends_on:
#      - db
#    command: ["migrate", "--revert", "--yes"]
#    deploy:
#      replicas: 0
